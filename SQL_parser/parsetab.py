
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND COMMA CREATE DELETE DIVISION DROP ENDREQUEST EQUAL FROM GREATER_THAN GREATER_THAN_OR_EQUAL INSERT INTERSECT INTO JOIN LBRACKET LEFT LESS_THAN LESS_THAN_OR_EQUAL MINUS NAME NOT NOT_EQUAL ON OR OUTER PLUS RBRACKET RIGHT SELECT SET SHOW STAR TABLE UNION UPDATE USING VALUES WHERE bol bool float int strstart : create\n             | show\n             | drop\n             | select\n             | insert\n             | update\n             | deletecreate : CREATE create_body ENDREQUESTcreate_body : TABLE NAME LBRACKET values RBRACKETvalues : NAME type\n              | values COMMA NAME typeshow : SHOW CREATE TABLE NAME ENDREQUESTdrop : DROP TABLE NAME ENDREQUESTselect : SELECT select_body ENDREQUEST\n              | SELECT select_body condition ENDREQUESTselect_body : fields FROM NAME\n                   | STAR COMMA fields FROM NAME\n                   | STAR FROM NAMEinsert : INSERT insert_body ENDREQUESTinsert_body : INTO NAME VALUES LBRACKET fields RBRACKET\n                   | INTO NAME LBRACKET fields RBRACKET VALUES LBRACKET fields RBRACKETupdate : UPDATE update_body ENDREQUESTupdate_body : NAME SET expression\n                   | NAME SET expression conditionexpression : field EQUAL tree_expression\n                  | expression COMMA field EQUAL tree_expressiondelete : DELETE FROM NAME ENDREQUEST\n              | DELETE FROM NAME condition ENDREQUESTfields : NAME\n              | fields COMMA NAMEfield : NAMEcondition : WHERE tree_conditiontree_condition : tree_comparison operator_condition tree_condition\n                        | tree_comparison\n                        | tree_comparison operator_condition tree_comparisontree_comparison :  tree_expression operator_comparison tree_expressiontree_expression : field\n            | field operator_expression tree_expression\n            | operator_expression tree_expression\n            | LBRACKET tree_expression RBRACKET\n            | tree_expression operator_expression tree_expressionoperator_condition : AND\n                            | OR operator_comparison : EQUAL\n                            | NOT_EQUAL\n                            | GREATER_THAN\n                            | LESS_THAN\n                            | GREATER_THAN_OR_EQUAL\n                            | LESS_THAN_OR_EQUALoperator_expression : PLUS\n                | MINUS\n                | STAR\n                | DIVISIONtype : int\n            | str\n            | bol\n            | bool\n            | float'
    
_lr_action_items = {'CREATE':([0,10,],[9,18,]),'SHOW':([0,],[10,]),'DROP':([0,],[11,]),'SELECT':([0,],[12,]),'INSERT':([0,],[13,]),'UPDATE':([0,],[14,]),'DELETE':([0,],[15,]),'$end':([1,2,3,4,5,6,7,8,29,33,40,42,47,48,68,72,93,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-14,-19,-22,-13,-15,-27,-12,-28,]),'TABLE':([9,11,18,],[17,19,31,]),'STAR':([12,35,51,52,53,54,55,56,57,58,59,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,104,105,106,107,112,116,119,],[23,58,58,58,58,58,-31,-50,-51,-52,-53,58,-42,-43,58,58,-44,-45,-46,-47,-48,-49,58,58,58,58,58,58,58,-40,58,58,58,]),'NAME':([12,14,17,19,25,28,31,35,36,37,38,39,43,45,53,54,56,57,58,59,65,73,74,75,76,77,78,79,80,81,82,83,84,87,88,91,92,101,116,118,],[22,27,30,32,41,44,46,55,60,61,22,63,55,70,55,55,-50,-51,-52,-53,22,55,-42,-43,55,55,-44,-45,-46,-47,-48,-49,55,108,22,55,55,113,55,22,]),'INTO':([13,],[25,]),'FROM':([15,21,22,23,61,62,],[28,36,-29,39,-30,87,]),'ENDREQUEST':([16,20,24,26,32,34,44,46,49,50,52,55,60,63,66,69,85,90,100,102,103,104,105,106,107,108,112,114,119,121,],[29,33,40,42,47,48,68,72,-32,-34,-37,-31,-16,-18,-23,93,-39,-24,-9,-34,-33,-36,-41,-38,-40,-17,-25,-20,-26,-21,]),'WHERE':([20,44,52,55,60,63,66,85,105,106,107,108,112,119,],[35,35,-37,-31,-16,-18,35,-39,-41,-38,-40,-17,-25,-26,]),'COMMA':([21,22,23,52,55,61,62,66,71,85,89,94,95,96,97,98,99,105,106,107,109,112,117,119,120,],[37,-29,38,-37,-31,-30,37,91,101,-39,37,-10,-54,-55,-56,-57,-58,-41,-38,-40,37,-25,-11,-26,37,]),'RBRACKET':([22,52,55,61,71,85,86,89,94,95,96,97,98,99,105,106,107,109,117,120,],[-29,-37,-31,-30,100,-39,107,110,-10,-54,-55,-56,-57,-58,-41,-38,-40,114,-11,121,]),'SET':([27,],[43,]),'LBRACKET':([30,35,41,53,54,56,57,58,59,64,73,74,75,76,77,78,79,80,81,82,83,84,92,115,116,],[45,54,65,54,54,-50,-51,-52,-53,88,54,-42,-43,54,54,-44,-45,-46,-47,-48,-49,54,54,118,54,]),'PLUS':([35,51,52,53,54,55,56,57,58,59,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,104,105,106,107,112,116,119,],[56,56,56,56,56,-31,-50,-51,-52,-53,56,-42,-43,56,56,-44,-45,-46,-47,-48,-49,56,56,56,56,56,56,56,-40,56,56,56,]),'MINUS':([35,51,52,53,54,55,56,57,58,59,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,104,105,106,107,112,116,119,],[57,57,57,57,57,-31,-50,-51,-52,-53,57,-42,-43,57,57,-44,-45,-46,-47,-48,-49,57,57,57,57,57,57,57,-40,57,57,57,]),'DIVISION':([35,51,52,53,54,55,56,57,58,59,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,104,105,106,107,112,116,119,],[59,59,59,59,59,-31,-50,-51,-52,-53,59,-42,-43,59,59,-44,-45,-46,-47,-48,-49,59,59,59,59,59,59,59,-40,59,59,59,]),'VALUES':([41,110,],[64,115,]),'AND':([50,52,55,85,102,104,105,106,107,],[74,-37,-31,-39,74,-36,-41,-38,-40,]),'OR':([50,52,55,85,102,104,105,106,107,],[75,-37,-31,-39,75,-36,-41,-38,-40,]),'EQUAL':([51,52,55,67,85,105,106,107,111,],[78,-37,-31,92,-39,-41,-38,-40,116,]),'NOT_EQUAL':([51,52,55,85,105,106,107,],[79,-37,-31,-39,-41,-38,-40,]),'GREATER_THAN':([51,52,55,85,105,106,107,],[80,-37,-31,-39,-41,-38,-40,]),'LESS_THAN':([51,52,55,85,105,106,107,],[81,-37,-31,-39,-41,-38,-40,]),'GREATER_THAN_OR_EQUAL':([51,52,55,85,105,106,107,],[82,-37,-31,-39,-41,-38,-40,]),'LESS_THAN_OR_EQUAL':([51,52,55,85,105,106,107,],[83,-37,-31,-39,-41,-38,-40,]),'int':([70,113,],[95,95,]),'str':([70,113,],[96,96,]),'bol':([70,113,],[97,97,]),'bool':([70,113,],[98,98,]),'float':([70,113,],[99,99,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'create':([0,],[2,]),'show':([0,],[3,]),'drop':([0,],[4,]),'select':([0,],[5,]),'insert':([0,],[6,]),'update':([0,],[7,]),'delete':([0,],[8,]),'create_body':([9,],[16,]),'select_body':([12,],[20,]),'fields':([12,38,65,88,118,],[21,62,89,109,120,]),'insert_body':([13,],[24,]),'update_body':([14,],[26,]),'condition':([20,44,66,],[34,69,90,]),'tree_condition':([35,73,],[49,103,]),'tree_comparison':([35,73,],[50,102,]),'tree_expression':([35,53,54,73,76,77,84,92,116,],[51,85,86,51,104,105,106,112,119,]),'field':([35,43,53,54,73,76,77,84,91,92,116,],[52,67,52,52,52,52,52,52,111,52,52,]),'operator_expression':([35,51,52,53,54,73,76,77,84,85,86,92,104,105,106,112,116,119,],[53,77,84,53,53,53,53,53,53,77,77,53,77,77,77,77,53,77,]),'expression':([43,],[66,]),'values':([45,],[71,]),'operator_condition':([50,102,],[73,73,]),'operator_comparison':([51,],[76,]),'type':([70,113,],[94,117,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> create','start',1,'p_start','SQL_parser.py',183),
  ('start -> show','start',1,'p_start','SQL_parser.py',184),
  ('start -> drop','start',1,'p_start','SQL_parser.py',185),
  ('start -> select','start',1,'p_start','SQL_parser.py',186),
  ('start -> insert','start',1,'p_start','SQL_parser.py',187),
  ('start -> update','start',1,'p_start','SQL_parser.py',188),
  ('start -> delete','start',1,'p_start','SQL_parser.py',189),
  ('create -> CREATE create_body ENDREQUEST','create',3,'p_create','SQL_parser.py',196),
  ('create_body -> TABLE NAME LBRACKET values RBRACKET','create_body',5,'p_create_body','SQL_parser.py',202),
  ('values -> NAME type','values',2,'p_values','SQL_parser.py',208),
  ('values -> values COMMA NAME type','values',4,'p_values','SQL_parser.py',209),
  ('show -> SHOW CREATE TABLE NAME ENDREQUEST','show',5,'p_show','SQL_parser.py',220),
  ('drop -> DROP TABLE NAME ENDREQUEST','drop',4,'p_drop','SQL_parser.py',226),
  ('select -> SELECT select_body ENDREQUEST','select',3,'p_select','SQL_parser.py',232),
  ('select -> SELECT select_body condition ENDREQUEST','select',4,'p_select','SQL_parser.py',233),
  ('select_body -> fields FROM NAME','select_body',3,'p_select_body','SQL_parser.py',241),
  ('select_body -> STAR COMMA fields FROM NAME','select_body',5,'p_select_body','SQL_parser.py',242),
  ('select_body -> STAR FROM NAME','select_body',3,'p_select_body','SQL_parser.py',243),
  ('insert -> INSERT insert_body ENDREQUEST','insert',3,'p_insert','SQL_parser.py',254),
  ('insert_body -> INTO NAME VALUES LBRACKET fields RBRACKET','insert_body',6,'p_insert_body','SQL_parser.py',260),
  ('insert_body -> INTO NAME LBRACKET fields RBRACKET VALUES LBRACKET fields RBRACKET','insert_body',9,'p_insert_body','SQL_parser.py',261),
  ('update -> UPDATE update_body ENDREQUEST','update',3,'p_update','SQL_parser.py',270),
  ('update_body -> NAME SET expression','update_body',3,'p_update_body','SQL_parser.py',276),
  ('update_body -> NAME SET expression condition','update_body',4,'p_update_body','SQL_parser.py',277),
  ('expression -> field EQUAL tree_expression','expression',3,'p_expression','SQL_parser.py',286),
  ('expression -> expression COMMA field EQUAL tree_expression','expression',5,'p_expression','SQL_parser.py',287),
  ('delete -> DELETE FROM NAME ENDREQUEST','delete',4,'p_delete','SQL_parser.py',300),
  ('delete -> DELETE FROM NAME condition ENDREQUEST','delete',5,'p_delete','SQL_parser.py',301),
  ('fields -> NAME','fields',1,'p_fields','SQL_parser.py',309),
  ('fields -> fields COMMA NAME','fields',3,'p_fields','SQL_parser.py',310),
  ('field -> NAME','field',1,'p_field','SQL_parser.py',321),
  ('condition -> WHERE tree_condition','condition',2,'p_condition','SQL_parser.py',327),
  ('tree_condition -> tree_comparison operator_condition tree_condition','tree_condition',3,'p_tree_condition','SQL_parser.py',333),
  ('tree_condition -> tree_comparison','tree_condition',1,'p_tree_condition','SQL_parser.py',334),
  ('tree_condition -> tree_comparison operator_condition tree_comparison','tree_condition',3,'p_tree_condition','SQL_parser.py',335),
  ('tree_comparison -> tree_expression operator_comparison tree_expression','tree_comparison',3,'p_tree_comparison','SQL_parser.py',349),
  ('tree_expression -> field','tree_expression',1,'p_tree_expression','SQL_parser.py',357),
  ('tree_expression -> field operator_expression tree_expression','tree_expression',3,'p_tree_expression','SQL_parser.py',358),
  ('tree_expression -> operator_expression tree_expression','tree_expression',2,'p_tree_expression','SQL_parser.py',359),
  ('tree_expression -> LBRACKET tree_expression RBRACKET','tree_expression',3,'p_tree_expression','SQL_parser.py',360),
  ('tree_expression -> tree_expression operator_expression tree_expression','tree_expression',3,'p_tree_expression','SQL_parser.py',361),
  ('operator_condition -> AND','operator_condition',1,'p_operator_condition','SQL_parser.py',373),
  ('operator_condition -> OR','operator_condition',1,'p_operator_condition','SQL_parser.py',374),
  ('operator_comparison -> EQUAL','operator_comparison',1,'p_operator_comparison','SQL_parser.py',380),
  ('operator_comparison -> NOT_EQUAL','operator_comparison',1,'p_operator_comparison','SQL_parser.py',381),
  ('operator_comparison -> GREATER_THAN','operator_comparison',1,'p_operator_comparison','SQL_parser.py',382),
  ('operator_comparison -> LESS_THAN','operator_comparison',1,'p_operator_comparison','SQL_parser.py',383),
  ('operator_comparison -> GREATER_THAN_OR_EQUAL','operator_comparison',1,'p_operator_comparison','SQL_parser.py',384),
  ('operator_comparison -> LESS_THAN_OR_EQUAL','operator_comparison',1,'p_operator_comparison','SQL_parser.py',385),
  ('operator_expression -> PLUS','operator_expression',1,'p_operator_expression','SQL_parser.py',391),
  ('operator_expression -> MINUS','operator_expression',1,'p_operator_expression','SQL_parser.py',392),
  ('operator_expression -> STAR','operator_expression',1,'p_operator_expression','SQL_parser.py',393),
  ('operator_expression -> DIVISION','operator_expression',1,'p_operator_expression','SQL_parser.py',394),
  ('type -> int','type',1,'p_type','SQL_parser.py',400),
  ('type -> str','type',1,'p_type','SQL_parser.py',401),
  ('type -> bol','type',1,'p_type','SQL_parser.py',402),
  ('type -> bool','type',1,'p_type','SQL_parser.py',403),
  ('type -> float','type',1,'p_type','SQL_parser.py',404),
]
