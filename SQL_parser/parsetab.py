
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALL AND AS BEGIN COLON COMMA CREATE DELETE DIVISION DOT DROP END ENDREQUEST EQUAL FOR FROM GREATER_THAN GREATER_THAN_OR_EQUAL HYPHEN INSERT INTERSECT INTO JOIN LBRACKET LEFT LESS_THAN LESS_THAN_OR_EQUAL MINUS NAME NOT NOT_EQUAL ON OR OUTER PLUS QUOTE RBRACKET RIGHT ROLLBACK SELECT SET SHOW STAR SYSTEM TABLE TIME TO TRANSACTION UNION UPDATE USING VALUES WHERE bol bool float int strstart : create ENDREQUEST\n             | show ENDREQUEST\n             | drop ENDREQUEST\n             | tree_selects ENDREQUEST\n             | insert ENDREQUEST\n             | update ENDREQUEST\n             | delete ENDREQUEST\n             | transaction ENDREQUESTtransaction : BEGIN TRANSACTION\n                   | END TRANSACTION\n                   | ROLLBACKcreate : CREATE create_bodycreate_body : TABLE NAME LBRACKET variables RBRACKETvariables : NAME type\n              | variables COMMA NAME typeshow : SHOW CREATE TABLE NAMEdrop : DROP TABLE NAMEjoin : JOIN\n            | LEFT OUTER JOIN\n            | RIGHT OUTER JOINunion : UNION\n            | UNION ALLintersect : INTERSECTtree_selects :   LBRACKET tree_selects RBRACKET union LBRACKET tree_selects RBRACKET\n                    |   LBRACKET tree_selects RBRACKET intersect LBRACKET tree_selects RBRACKET\n                    |   LBRACKET tree_selects RBRACKET join LBRACKET tree_selects RBRACKET join_condition\n                    |   LBRACKET tree_selects RBRACKET join LBRACKET tree_selects RBRACKET\n                    |   LBRACKET tree_selects RBRACKET union select\n                    |   LBRACKET tree_selects RBRACKET intersect select\n                    |   LBRACKET tree_selects RBRACKET join select join_condition\n                    |   LBRACKET tree_selects RBRACKET join select\n                    |   LBRACKET tree_selects RBRACKET join name_table join_condition\n                    |   LBRACKET tree_selects RBRACKET join name_table\n                    |   select union LBRACKET tree_selects RBRACKET\n                    |   select intersect LBRACKET tree_selects RBRACKET\n                    |   select join LBRACKET tree_selects RBRACKET AS name_table join_condition\n                    |   select join LBRACKET tree_selects RBRACKET AS name_table\n                    |   select union select\n                    |   select intersect select\n                    |   select join select join_condition\n                    |   select join select\n                    |   select join name_table join_condition\n                    |   select join name_table\n                    |   selectjoin_condition : ON field EQUAL field\n            | USING LBRACKET fields RBRACKETname_table : NAMEselect : SELECT select_body condition FOR SYSTEM TIME FROM date TO date\n              | SELECT select_body FOR SYSTEM TIME FROM date TO date\n              | SELECT select_body condition\n              | SELECT select_bodydate : NAME HYPHEN NAME HYPHEN NAME NAME COLON NAME COLON NAME\n            | NAME HYPHEN NAME HYPHEN NAME NAME COLON NAME\n            | NAME HYPHEN NAME HYPHEN NAME NAME\n            | NAME HYPHEN NAME HYPHEN NAME\n            | NAME HYPHEN NAMEselect_body : fields FROM NAME\n                   | STAR COMMA fields FROM NAME\n                   | STAR FROM NAMEinsert : INSERT insert_bodyinsert_body : INTO NAME VALUES LBRACKET values RBRACKET\n                   | INTO NAME LBRACKET fields RBRACKET VALUES LBRACKET values RBRACKETupdate : UPDATE update_bodyupdate_body : NAME SET expression\n                   | NAME SET expression conditionexpression : field EQUAL tree_expression\n                  | expression COMMA field EQUAL tree_expressiondelete : DELETE FROM NAME\n              | DELETE FROM NAME conditionvalues : value\n              | values COMMA valuevalue : NAME\n             | QUOTE NAME QUOTEfields : field\n              | fields COMMA fieldfield : NAME\n            | NAME DOT NAMEcondition : WHERE tree_conditiontree_condition : tree_comparison operator_condition tree_condition\n                        | tree_comparisontree_comparison :  tree_expression operator_comparison tree_expressiontree_expression : value\n            | value operator_expression tree_expression\n            | operator_expression tree_expression\n            | LBRACKET tree_expression RBRACKET\n            | tree_expression operator_expression tree_expressionoperator_condition : AND\n                            | OR operator_comparison : EQUAL\n                            | NOT_EQUAL\n                            | GREATER_THAN\n                            | LESS_THAN\n                            | GREATER_THAN_OR_EQUAL\n                            | LESS_THAN_OR_EQUALoperator_expression : PLUS\n                | MINUS\n                | STAR\n                | DIVISIONtype : int\n            | str\n            | bol\n            | bool\n            | float'
    
_lr_action_items = {'CREATE':([0,11,],[10,32,]),'SHOW':([0,],[11,]),'DROP':([0,],[12,]),'LBRACKET':([0,13,35,36,37,38,39,40,55,60,62,64,67,70,75,83,84,85,90,93,94,95,106,107,110,111,112,113,121,123,125,137,140,141,142,143,144,145,146,147,148,149,150,151,195,196,],[13,13,60,62,64,-21,-23,-18,81,13,13,13,-22,96,107,121,123,125,131,-19,-20,133,107,107,-95,-96,-97,-98,13,13,13,107,107,-87,-88,107,107,-89,-90,-91,-92,-93,-94,107,204,107,]),'INSERT':([0,],[15,]),'UPDATE':([0,],[16,]),'DELETE':([0,],[17,]),'BEGIN':([0,],[18,]),'END':([0,],[19,]),'ROLLBACK':([0,],[20,]),'SELECT':([0,13,35,36,37,38,39,40,60,62,64,67,83,84,85,93,94,121,123,125,],[21,21,21,21,21,-21,-23,-18,21,21,21,-22,21,21,21,-19,-20,21,21,21,]),'$end':([1,22,23,24,25,26,27,28,29,],[0,-1,-2,-3,-4,-5,-6,-7,-8,]),'ENDREQUEST':([2,3,4,5,6,7,8,9,14,20,30,43,45,48,49,50,52,57,59,61,63,65,66,72,73,82,88,92,97,99,102,103,105,108,114,116,118,122,124,126,127,128,129,135,152,162,167,168,176,179,180,181,182,183,184,185,187,188,189,190,191,192,193,201,202,205,211,212,213,214,216,217,219,221,],[22,23,24,25,26,27,28,29,-44,-11,-12,-60,-63,-9,-10,-51,-76,-17,-38,-39,-41,-43,-47,-68,-50,-16,-40,-42,-64,-69,-78,-80,-82,-72,-57,-77,-59,-28,-29,-31,-33,-34,-35,-65,-84,-13,-30,-32,-66,-79,-81,-86,-83,-85,-73,-58,-24,-25,-27,-45,-46,-37,-61,-26,-36,-67,-49,-56,-62,-48,-55,-54,-53,-52,]),'TABLE':([10,12,32,],[31,33,56,]),'RBRACKET':([14,34,50,52,54,59,61,63,65,66,73,86,87,88,91,92,102,103,105,108,114,115,116,118,120,122,124,126,127,128,129,134,152,153,156,157,158,159,160,161,164,165,166,167,168,170,172,173,179,180,181,182,183,184,185,187,188,189,190,191,192,200,201,202,203,209,211,212,214,216,217,219,221,],[-44,58,-51,-76,-74,-38,-39,-41,-43,-47,-50,128,129,-40,132,-42,-78,-80,-82,-72,-57,-75,-77,-59,162,-28,-29,-31,-33,-34,-35,174,-84,183,-14,-99,-100,-101,-102,-103,187,188,189,-30,-32,191,193,-70,-79,-81,-86,-83,-85,-73,-58,-24,-25,-27,-45,-46,-37,-15,-26,-36,-71,213,-49,-56,-48,-55,-54,-53,-52,]),'UNION':([14,50,58,73,102,103,105,108,114,118,152,179,180,181,182,183,184,185,211,212,214,216,217,219,221,],[38,-51,38,-50,-78,-80,-82,-72,-57,-59,-84,-79,-81,-86,-83,-85,-73,-58,-49,-56,-48,-55,-54,-53,-52,]),'INTERSECT':([14,50,58,73,102,103,105,108,114,118,152,179,180,181,182,183,184,185,211,212,214,216,217,219,221,],[39,-51,39,-50,-78,-80,-82,-72,-57,-59,-84,-79,-81,-86,-83,-85,-73,-58,-49,-56,-48,-55,-54,-53,-52,]),'JOIN':([14,50,58,68,69,73,102,103,105,108,114,118,152,179,180,181,182,183,184,185,211,212,214,216,217,219,221,],[40,-51,40,93,94,-50,-78,-80,-82,-72,-57,-59,-84,-79,-81,-86,-83,-85,-73,-58,-49,-56,-48,-55,-54,-53,-52,]),'LEFT':([14,50,58,73,102,103,105,108,114,118,152,179,180,181,182,183,184,185,211,212,214,216,217,219,221,],[41,-51,41,-50,-78,-80,-82,-72,-57,-59,-84,-79,-81,-86,-83,-85,-73,-58,-49,-56,-48,-55,-54,-53,-52,]),'RIGHT':([14,50,58,73,102,103,105,108,114,118,152,179,180,181,182,183,184,185,211,212,214,216,217,219,221,],[42,-51,42,-50,-78,-80,-82,-72,-57,-59,-84,-79,-81,-86,-83,-85,-73,-58,-49,-56,-48,-55,-54,-53,-52,]),'INTO':([15,],[44,]),'NAME':([16,21,31,33,37,40,44,47,56,71,75,76,77,78,79,80,81,85,89,93,94,96,106,107,109,110,111,112,113,131,133,136,137,140,141,142,143,144,145,146,147,148,149,150,151,155,163,169,171,178,194,196,197,204,207,208,210,215,216,218,220,],[46,52,55,57,66,-18,70,72,82,52,108,114,52,116,52,118,119,66,52,-19,-20,52,108,108,154,-95,-96,-97,-98,52,108,52,108,108,-87,-88,108,108,-89,-90,-91,-92,-93,-94,108,185,186,52,66,199,108,108,199,108,199,212,199,216,217,219,221,]),'FROM':([17,51,52,53,54,115,116,117,139,177,],[47,76,-76,80,-74,-75,-77,155,178,197,]),'TRANSACTION':([18,19,],[48,49,]),'STAR':([21,75,104,105,106,107,108,110,111,112,113,137,140,141,142,143,144,145,146,147,148,149,150,151,152,153,176,180,181,182,183,184,196,205,],[53,112,112,112,112,112,-72,-95,-96,-97,-98,112,112,-87,-88,112,112,-89,-90,-91,-92,-93,-94,112,112,112,112,112,112,112,-85,-73,112,112,]),'ALL':([38,],[67,]),'OUTER':([41,42,],[68,69,]),'SET':([46,],[71,]),'FOR':([50,73,102,103,105,108,114,118,152,179,180,181,182,183,184,185,],[74,100,-78,-80,-82,-72,-57,-59,-84,-79,-81,-86,-83,-85,-73,-58,]),'ON':([50,63,65,66,73,102,103,105,108,114,118,126,127,152,179,180,181,182,183,184,185,189,192,211,212,214,216,217,219,221,],[-51,89,89,-47,-50,-78,-80,-82,-72,-57,-59,89,89,-84,-79,-81,-86,-83,-85,-73,-58,89,89,-49,-56,-48,-55,-54,-53,-52,]),'USING':([50,63,65,66,73,102,103,105,108,114,118,126,127,152,179,180,181,182,183,184,185,189,192,211,212,214,216,217,219,221,],[-51,90,90,-47,-50,-78,-80,-82,-72,-57,-59,90,90,-84,-79,-81,-86,-83,-85,-73,-58,90,90,-49,-56,-48,-55,-54,-53,-52,]),'WHERE':([50,72,97,105,108,114,118,152,176,181,182,183,184,185,205,],[75,75,75,-82,-72,-57,-59,-84,-66,-86,-83,-85,-73,-58,-67,]),'COMMA':([51,52,53,54,97,105,108,115,116,117,120,134,152,156,157,158,159,160,161,170,172,173,176,181,182,183,184,200,203,205,209,],[77,-76,79,-74,136,-82,-72,-75,-77,77,163,77,-84,-14,-99,-100,-101,-102,-103,77,194,-70,-66,-86,-83,-85,-73,-15,-71,-67,194,]),'EQUAL':([52,98,104,105,108,116,130,152,175,181,182,183,184,],[-76,137,145,-82,-72,-77,169,-84,196,-86,-83,-85,-73,]),'DOT':([52,],[78,]),'VALUES':([70,174,],[95,195,]),'SYSTEM':([74,100,],[101,138,]),'QUOTE':([75,106,107,110,111,112,113,133,137,140,141,142,143,144,145,146,147,148,149,150,151,154,194,196,204,],[109,109,109,-95,-96,-97,-98,109,109,109,-87,-88,109,109,-89,-90,-91,-92,-93,-94,109,184,109,109,109,]),'PLUS':([75,104,105,106,107,108,110,111,112,113,137,140,141,142,143,144,145,146,147,148,149,150,151,152,153,176,180,181,182,183,184,196,205,],[110,110,110,110,110,-72,-95,-96,-97,-98,110,110,-87,-88,110,110,-89,-90,-91,-92,-93,-94,110,110,110,110,110,110,110,-85,-73,110,110,]),'MINUS':([75,104,105,106,107,108,110,111,112,113,137,140,141,142,143,144,145,146,147,148,149,150,151,152,153,176,180,181,182,183,184,196,205,],[111,111,111,111,111,-72,-95,-96,-97,-98,111,111,-87,-88,111,111,-89,-90,-91,-92,-93,-94,111,111,111,111,111,111,111,-85,-73,111,111,]),'DIVISION':([75,104,105,106,107,108,110,111,112,113,137,140,141,142,143,144,145,146,147,148,149,150,151,152,153,176,180,181,182,183,184,196,205,],[113,113,113,113,113,-72,-95,-96,-97,-98,113,113,-87,-88,113,113,-89,-90,-91,-92,-93,-94,113,113,113,113,113,113,113,-85,-73,113,113,]),'TIME':([101,138,],[139,177,]),'AND':([103,105,108,152,180,181,182,183,184,],[141,-82,-72,-84,-81,-86,-83,-85,-73,]),'OR':([103,105,108,152,180,181,182,183,184,],[142,-82,-72,-84,-81,-86,-83,-85,-73,]),'NOT_EQUAL':([104,105,108,152,181,182,183,184,],[146,-82,-72,-84,-86,-83,-85,-73,]),'GREATER_THAN':([104,105,108,152,181,182,183,184,],[147,-82,-72,-84,-86,-83,-85,-73,]),'LESS_THAN':([104,105,108,152,181,182,183,184,],[148,-82,-72,-84,-86,-83,-85,-73,]),'GREATER_THAN_OR_EQUAL':([104,105,108,152,181,182,183,184,],[149,-82,-72,-84,-86,-83,-85,-73,]),'LESS_THAN_OR_EQUAL':([104,105,108,152,181,182,183,184,],[150,-82,-72,-84,-86,-83,-85,-73,]),'int':([119,186,],[157,157,]),'str':([119,186,],[158,158,]),'bol':([119,186,],[159,159,]),'bool':([119,186,],[160,160,]),'float':([119,186,],[161,161,]),'AS':([132,],[171,]),'TO':([198,206,212,216,217,219,221,],[207,210,-56,-55,-54,-53,-52,]),'HYPHEN':([199,212,],[208,215,]),'COLON':([217,219,],[218,220,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'create':([0,],[2,]),'show':([0,],[3,]),'drop':([0,],[4,]),'tree_selects':([0,13,60,62,64,121,123,125,],[5,34,86,87,91,164,165,166,]),'insert':([0,],[6,]),'update':([0,],[7,]),'delete':([0,],[8,]),'transaction':([0,],[9,]),'select':([0,13,35,36,37,60,62,64,83,84,85,121,123,125,],[14,14,59,61,63,14,14,14,122,124,126,14,14,14,]),'create_body':([10,],[30,]),'union':([14,58,],[35,83,]),'intersect':([14,58,],[36,84,]),'join':([14,58,],[37,85,]),'insert_body':([15,],[43,]),'update_body':([16,],[45,]),'select_body':([21,],[50,]),'fields':([21,79,96,131,],[51,117,134,170,]),'field':([21,71,77,79,89,96,131,136,169,],[54,98,115,54,130,54,54,175,190,]),'name_table':([37,85,171,],[65,127,192,]),'condition':([50,72,97,],[73,99,135,]),'join_condition':([63,65,126,127,189,192,],[88,92,167,168,201,202,]),'expression':([71,],[97,]),'tree_condition':([75,140,],[102,179,]),'tree_comparison':([75,140,],[103,103,]),'tree_expression':([75,106,107,137,140,143,144,151,196,],[104,152,153,176,104,180,181,182,205,]),'value':([75,106,107,133,137,140,143,144,151,194,196,204,],[105,105,105,173,105,105,105,105,105,203,105,173,]),'operator_expression':([75,104,105,106,107,137,140,143,144,151,152,153,176,180,181,182,196,205,],[106,144,151,106,106,106,106,106,106,106,144,144,144,144,144,144,106,144,]),'variables':([81,],[120,]),'operator_condition':([103,],[140,]),'operator_comparison':([104,],[143,]),'type':([119,186,],[156,200,]),'values':([133,204,],[172,209,]),'date':([178,197,207,210,],[198,206,211,214,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> create ENDREQUEST','start',2,'p_start','SQL_parser.py',284),
  ('start -> show ENDREQUEST','start',2,'p_start','SQL_parser.py',285),
  ('start -> drop ENDREQUEST','start',2,'p_start','SQL_parser.py',286),
  ('start -> tree_selects ENDREQUEST','start',2,'p_start','SQL_parser.py',287),
  ('start -> insert ENDREQUEST','start',2,'p_start','SQL_parser.py',288),
  ('start -> update ENDREQUEST','start',2,'p_start','SQL_parser.py',289),
  ('start -> delete ENDREQUEST','start',2,'p_start','SQL_parser.py',290),
  ('start -> transaction ENDREQUEST','start',2,'p_start','SQL_parser.py',291),
  ('transaction -> BEGIN TRANSACTION','transaction',2,'p_transaction','SQL_parser.py',297),
  ('transaction -> END TRANSACTION','transaction',2,'p_transaction','SQL_parser.py',298),
  ('transaction -> ROLLBACK','transaction',1,'p_transaction','SQL_parser.py',299),
  ('create -> CREATE create_body','create',2,'p_create','SQL_parser.py',310),
  ('create_body -> TABLE NAME LBRACKET variables RBRACKET','create_body',5,'p_create_body','SQL_parser.py',316),
  ('variables -> NAME type','variables',2,'p_variables','SQL_parser.py',322),
  ('variables -> variables COMMA NAME type','variables',4,'p_variables','SQL_parser.py',323),
  ('show -> SHOW CREATE TABLE NAME','show',4,'p_show','SQL_parser.py',334),
  ('drop -> DROP TABLE NAME','drop',3,'p_drop','SQL_parser.py',340),
  ('join -> JOIN','join',1,'p_join','SQL_parser.py',346),
  ('join -> LEFT OUTER JOIN','join',3,'p_join','SQL_parser.py',347),
  ('join -> RIGHT OUTER JOIN','join',3,'p_join','SQL_parser.py',348),
  ('union -> UNION','union',1,'p_union','SQL_parser.py',357),
  ('union -> UNION ALL','union',2,'p_union','SQL_parser.py',358),
  ('intersect -> INTERSECT','intersect',1,'p_intersect','SQL_parser.py',367),
  ('tree_selects -> LBRACKET tree_selects RBRACKET union LBRACKET tree_selects RBRACKET','tree_selects',7,'p_tree_selects','SQL_parser.py',373),
  ('tree_selects -> LBRACKET tree_selects RBRACKET intersect LBRACKET tree_selects RBRACKET','tree_selects',7,'p_tree_selects','SQL_parser.py',374),
  ('tree_selects -> LBRACKET tree_selects RBRACKET join LBRACKET tree_selects RBRACKET join_condition','tree_selects',8,'p_tree_selects','SQL_parser.py',375),
  ('tree_selects -> LBRACKET tree_selects RBRACKET join LBRACKET tree_selects RBRACKET','tree_selects',7,'p_tree_selects','SQL_parser.py',376),
  ('tree_selects -> LBRACKET tree_selects RBRACKET union select','tree_selects',5,'p_tree_selects','SQL_parser.py',377),
  ('tree_selects -> LBRACKET tree_selects RBRACKET intersect select','tree_selects',5,'p_tree_selects','SQL_parser.py',378),
  ('tree_selects -> LBRACKET tree_selects RBRACKET join select join_condition','tree_selects',6,'p_tree_selects','SQL_parser.py',379),
  ('tree_selects -> LBRACKET tree_selects RBRACKET join select','tree_selects',5,'p_tree_selects','SQL_parser.py',380),
  ('tree_selects -> LBRACKET tree_selects RBRACKET join name_table join_condition','tree_selects',6,'p_tree_selects','SQL_parser.py',381),
  ('tree_selects -> LBRACKET tree_selects RBRACKET join name_table','tree_selects',5,'p_tree_selects','SQL_parser.py',382),
  ('tree_selects -> select union LBRACKET tree_selects RBRACKET','tree_selects',5,'p_tree_selects','SQL_parser.py',383),
  ('tree_selects -> select intersect LBRACKET tree_selects RBRACKET','tree_selects',5,'p_tree_selects','SQL_parser.py',384),
  ('tree_selects -> select join LBRACKET tree_selects RBRACKET AS name_table join_condition','tree_selects',8,'p_tree_selects','SQL_parser.py',385),
  ('tree_selects -> select join LBRACKET tree_selects RBRACKET AS name_table','tree_selects',7,'p_tree_selects','SQL_parser.py',386),
  ('tree_selects -> select union select','tree_selects',3,'p_tree_selects','SQL_parser.py',387),
  ('tree_selects -> select intersect select','tree_selects',3,'p_tree_selects','SQL_parser.py',388),
  ('tree_selects -> select join select join_condition','tree_selects',4,'p_tree_selects','SQL_parser.py',389),
  ('tree_selects -> select join select','tree_selects',3,'p_tree_selects','SQL_parser.py',390),
  ('tree_selects -> select join name_table join_condition','tree_selects',4,'p_tree_selects','SQL_parser.py',391),
  ('tree_selects -> select join name_table','tree_selects',3,'p_tree_selects','SQL_parser.py',392),
  ('tree_selects -> select','tree_selects',1,'p_tree_selects','SQL_parser.py',393),
  ('join_condition -> ON field EQUAL field','join_condition',4,'p_join_right_table','SQL_parser.py',451),
  ('join_condition -> USING LBRACKET fields RBRACKET','join_condition',4,'p_join_right_table','SQL_parser.py',452),
  ('name_table -> NAME','name_table',1,'p_name_table','SQL_parser.py',460),
  ('select -> SELECT select_body condition FOR SYSTEM TIME FROM date TO date','select',10,'p_select','SQL_parser.py',466),
  ('select -> SELECT select_body FOR SYSTEM TIME FROM date TO date','select',9,'p_select','SQL_parser.py',467),
  ('select -> SELECT select_body condition','select',3,'p_select','SQL_parser.py',468),
  ('select -> SELECT select_body','select',2,'p_select','SQL_parser.py',469),
  ('date -> NAME HYPHEN NAME HYPHEN NAME NAME COLON NAME COLON NAME','date',10,'p_date','SQL_parser.py',482),
  ('date -> NAME HYPHEN NAME HYPHEN NAME NAME COLON NAME','date',8,'p_date','SQL_parser.py',483),
  ('date -> NAME HYPHEN NAME HYPHEN NAME NAME','date',6,'p_date','SQL_parser.py',484),
  ('date -> NAME HYPHEN NAME HYPHEN NAME','date',5,'p_date','SQL_parser.py',485),
  ('date -> NAME HYPHEN NAME','date',3,'p_date','SQL_parser.py',486),
  ('select_body -> fields FROM NAME','select_body',3,'p_select_body','SQL_parser.py',504),
  ('select_body -> STAR COMMA fields FROM NAME','select_body',5,'p_select_body','SQL_parser.py',505),
  ('select_body -> STAR FROM NAME','select_body',3,'p_select_body','SQL_parser.py',506),
  ('insert -> INSERT insert_body','insert',2,'p_insert','SQL_parser.py',517),
  ('insert_body -> INTO NAME VALUES LBRACKET values RBRACKET','insert_body',6,'p_insert_body','SQL_parser.py',523),
  ('insert_body -> INTO NAME LBRACKET fields RBRACKET VALUES LBRACKET values RBRACKET','insert_body',9,'p_insert_body','SQL_parser.py',524),
  ('update -> UPDATE update_body','update',2,'p_update','SQL_parser.py',533),
  ('update_body -> NAME SET expression','update_body',3,'p_update_body','SQL_parser.py',539),
  ('update_body -> NAME SET expression condition','update_body',4,'p_update_body','SQL_parser.py',540),
  ('expression -> field EQUAL tree_expression','expression',3,'p_expression','SQL_parser.py',549),
  ('expression -> expression COMMA field EQUAL tree_expression','expression',5,'p_expression','SQL_parser.py',550),
  ('delete -> DELETE FROM NAME','delete',3,'p_delete','SQL_parser.py',563),
  ('delete -> DELETE FROM NAME condition','delete',4,'p_delete','SQL_parser.py',564),
  ('values -> value','values',1,'p_values','SQL_parser.py',572),
  ('values -> values COMMA value','values',3,'p_values','SQL_parser.py',573),
  ('value -> NAME','value',1,'p_value','SQL_parser.py',584),
  ('value -> QUOTE NAME QUOTE','value',3,'p_value','SQL_parser.py',585),
  ('fields -> field','fields',1,'p_fields','SQL_parser.py',594),
  ('fields -> fields COMMA field','fields',3,'p_fields','SQL_parser.py',595),
  ('field -> NAME','field',1,'p_field','SQL_parser.py',606),
  ('field -> NAME DOT NAME','field',3,'p_field','SQL_parser.py',607),
  ('condition -> WHERE tree_condition','condition',2,'p_condition','SQL_parser.py',616),
  ('tree_condition -> tree_comparison operator_condition tree_condition','tree_condition',3,'p_tree_condition','SQL_parser.py',622),
  ('tree_condition -> tree_comparison','tree_condition',1,'p_tree_condition','SQL_parser.py',623),
  ('tree_comparison -> tree_expression operator_comparison tree_expression','tree_comparison',3,'p_tree_comparison','SQL_parser.py',639),
  ('tree_expression -> value','tree_expression',1,'p_tree_expression','SQL_parser.py',648),
  ('tree_expression -> value operator_expression tree_expression','tree_expression',3,'p_tree_expression','SQL_parser.py',649),
  ('tree_expression -> operator_expression tree_expression','tree_expression',2,'p_tree_expression','SQL_parser.py',650),
  ('tree_expression -> LBRACKET tree_expression RBRACKET','tree_expression',3,'p_tree_expression','SQL_parser.py',651),
  ('tree_expression -> tree_expression operator_expression tree_expression','tree_expression',3,'p_tree_expression','SQL_parser.py',652),
  ('operator_condition -> AND','operator_condition',1,'p_operator_condition','SQL_parser.py',666),
  ('operator_condition -> OR','operator_condition',1,'p_operator_condition','SQL_parser.py',667),
  ('operator_comparison -> EQUAL','operator_comparison',1,'p_operator_comparison','SQL_parser.py',673),
  ('operator_comparison -> NOT_EQUAL','operator_comparison',1,'p_operator_comparison','SQL_parser.py',674),
  ('operator_comparison -> GREATER_THAN','operator_comparison',1,'p_operator_comparison','SQL_parser.py',675),
  ('operator_comparison -> LESS_THAN','operator_comparison',1,'p_operator_comparison','SQL_parser.py',676),
  ('operator_comparison -> GREATER_THAN_OR_EQUAL','operator_comparison',1,'p_operator_comparison','SQL_parser.py',677),
  ('operator_comparison -> LESS_THAN_OR_EQUAL','operator_comparison',1,'p_operator_comparison','SQL_parser.py',678),
  ('operator_expression -> PLUS','operator_expression',1,'p_operator_expression','SQL_parser.py',684),
  ('operator_expression -> MINUS','operator_expression',1,'p_operator_expression','SQL_parser.py',685),
  ('operator_expression -> STAR','operator_expression',1,'p_operator_expression','SQL_parser.py',686),
  ('operator_expression -> DIVISION','operator_expression',1,'p_operator_expression','SQL_parser.py',687),
  ('type -> int','type',1,'p_type','SQL_parser.py',693),
  ('type -> str','type',1,'p_type','SQL_parser.py',694),
  ('type -> bol','type',1,'p_type','SQL_parser.py',695),
  ('type -> bool','type',1,'p_type','SQL_parser.py',696),
  ('type -> float','type',1,'p_type','SQL_parser.py',697),
]
