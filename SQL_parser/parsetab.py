
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALL AND COMMA CREATE DELETE DIVISION DOT DROP ENDREQUEST EQUAL FROM GREATER_THAN GREATER_THAN_OR_EQUAL INSERT INTERSECT INTO JOIN LBRACKET LEFT LESS_THAN LESS_THAN_OR_EQUAL MINUS NAME NOT NOT_EQUAL ON OR OUTER PLUS RBRACKET RIGHT SELECT SET SHOW STAR TABLE UNION UPDATE USING VALUES WHERE bol bool float int strstart : create ENDREQUEST\n             | show ENDREQUEST\n             | drop ENDREQUEST\n             | tree_selects ENDREQUEST\n             | insert ENDREQUEST\n             | update ENDREQUEST\n             | delete ENDREQUESTcreate : CREATE create_bodycreate_body : TABLE NAME LBRACKET values RBRACKETvalues : NAME type\n              | values COMMA NAME typeshow : SHOW CREATE TABLE NAMEdrop : DROP TABLE NAMEtree_selects : nested_selectsnested_selects : select join join_right_table\n                    | nested_selects union nested_selects\n                    | nested_selects intersect nested_selects\n                    | selectjoin : JOIN\n            | LEFT OUTER JOIN\n            | RIGHT OUTER JOINjoin_right_table : NAME ON tree_condition\n            | NAME USING LBRACKET field RBRACKETunion : UNION\n            | UNION ALLintersect : INTERSECTselect : SELECT select_body\n              | SELECT select_body conditionselect_body : fields FROM NAME\n                   | STAR COMMA fields FROM NAME\n                   | STAR FROM NAMEinsert : INSERT insert_bodyinsert_body : INTO NAME VALUES LBRACKET fields RBRACKET\n                   | INTO NAME LBRACKET fields RBRACKET VALUES LBRACKET fields RBRACKETupdate : UPDATE update_bodyupdate_body : NAME SET expression\n                   | NAME SET expression conditionexpression : field EQUAL tree_expression\n                  | expression COMMA field EQUAL tree_expressiondelete : DELETE FROM NAME\n              | DELETE FROM NAME conditionfields : field\n              | fields COMMA fieldfield : NAME\n            | NAME DOT NAMEcondition : WHERE tree_conditiontree_condition : tree_comparison operator_condition tree_condition\n                        | tree_comparisontree_comparison :  tree_expression operator_comparison tree_expressiontree_expression : field\n            | field operator_expression tree_expression\n            | operator_expression tree_expression\n            | LBRACKET tree_expression RBRACKET\n            | tree_expression operator_expression tree_expressionoperator_condition : AND\n                            | OR operator_comparison : EQUAL\n                            | NOT_EQUAL\n                            | GREATER_THAN\n                            | LESS_THAN\n                            | GREATER_THAN_OR_EQUAL\n                            | LESS_THAN_OR_EQUALoperator_expression : PLUS\n                | MINUS\n                | STAR\n                | DIVISIONtype : int\n            | str\n            | bol\n            | bool\n            | float'
    
_lr_action_items = {'CREATE':([0,10,],[9,27,]),'SHOW':([0,],[10,]),'DROP':([0,],[11,]),'INSERT':([0,],[13,]),'UPDATE':([0,],[14,]),'DELETE':([0,],[15,]),'SELECT':([0,29,30,31,32,52,],[17,17,17,-24,-26,-25,]),'$end':([1,18,19,20,21,22,23,24,],[0,-1,-2,-3,-4,-5,-6,-7,]),'ENDREQUEST':([2,3,4,5,6,7,8,12,16,25,33,35,42,44,49,50,51,55,56,60,68,71,73,78,79,81,88,90,92,97,100,114,123,128,130,131,132,133,134,135,137,140,143,145,],[18,19,20,21,22,23,24,-14,-18,-8,-32,-35,-27,-44,-13,-16,-17,-40,-15,-28,-12,-36,-41,-46,-48,-50,-29,-45,-31,-37,-22,-52,-9,-38,-47,-49,-54,-51,-53,-30,-33,-23,-39,-34,]),'TABLE':([9,11,27,],[26,28,48,]),'UNION':([12,16,42,44,50,51,56,60,78,79,81,88,90,92,100,114,130,131,132,133,134,135,140,],[31,-18,-27,-44,31,31,-15,-28,-46,-48,-50,-29,-45,-31,-22,-52,-47,-49,-54,-51,-53,-30,-23,]),'INTERSECT':([12,16,42,44,50,51,56,60,78,79,81,88,90,92,100,114,130,131,132,133,134,135,140,],[32,-18,-27,-44,32,32,-15,-28,-46,-48,-50,-29,-45,-31,-22,-52,-47,-49,-54,-51,-53,-30,-23,]),'INTO':([13,],[34,]),'NAME':([14,17,26,28,34,37,38,39,48,54,61,62,63,64,65,66,67,70,74,76,77,82,83,84,85,86,87,95,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,116,124,139,142,],[36,44,47,49,53,55,57,-19,68,44,44,88,44,90,44,92,93,44,44,-20,-21,44,44,-63,-64,-65,-66,44,44,44,44,44,-55,-56,44,44,-57,-58,-59,-60,-61,-62,44,135,136,44,44,]),'FROM':([15,43,44,45,46,89,90,91,],[37,62,-44,66,-42,-43,-45,116,]),'JOIN':([16,42,44,58,59,60,78,79,81,88,90,92,114,130,131,132,133,134,135,],[39,-27,-44,76,77,-28,-46,-48,-50,-29,-45,-31,-52,-47,-49,-54,-51,-53,-30,]),'LEFT':([16,42,44,60,78,79,81,88,90,92,114,130,131,132,133,134,135,],[40,-27,-44,-28,-46,-48,-50,-29,-45,-31,-52,-47,-49,-54,-51,-53,-30,]),'RIGHT':([16,42,44,60,78,79,81,88,90,92,114,130,131,132,133,134,135,],[41,-27,-44,-28,-46,-48,-50,-29,-45,-31,-52,-47,-49,-54,-51,-53,-30,]),'STAR':([17,44,61,74,80,81,82,83,84,85,86,87,90,99,102,103,104,105,106,107,108,109,110,111,112,113,114,115,128,131,132,133,134,139,143,],[45,-44,86,86,86,86,86,86,-63,-64,-65,-66,-45,86,86,-55,-56,86,86,-57,-58,-59,-60,-61,-62,86,86,86,86,86,86,86,-53,86,86,]),'ALL':([31,],[52,]),'SET':([36,],[54,]),'OUTER':([40,41,],[58,59,]),'WHERE':([42,44,55,71,81,88,90,92,114,128,132,133,134,135,143,],[61,-44,61,61,-50,-29,-45,-31,-52,-38,-54,-51,-53,-30,-39,]),'COMMA':([43,44,45,46,71,81,89,90,91,94,96,114,117,118,119,120,121,122,125,128,132,133,134,141,143,144,],[63,-44,65,-42,98,-50,-43,-45,63,124,63,-52,-10,-67,-68,-69,-70,-71,63,-38,-54,-51,-53,-11,-39,63,]),'EQUAL':([44,72,80,81,90,114,127,132,133,134,],[-44,99,107,-50,-45,-52,139,-54,-51,-53,]),'PLUS':([44,61,74,80,81,82,83,84,85,86,87,90,99,102,103,104,105,106,107,108,109,110,111,112,113,114,115,128,131,132,133,134,139,143,],[-44,84,84,84,84,84,84,-63,-64,-65,-66,-45,84,84,-55,-56,84,84,-57,-58,-59,-60,-61,-62,84,84,84,84,84,84,84,-53,84,84,]),'MINUS':([44,61,74,80,81,82,83,84,85,86,87,90,99,102,103,104,105,106,107,108,109,110,111,112,113,114,115,128,131,132,133,134,139,143,],[-44,85,85,85,85,85,85,-63,-64,-65,-66,-45,85,85,-55,-56,85,85,-57,-58,-59,-60,-61,-62,85,85,85,85,85,85,85,-53,85,85,]),'DIVISION':([44,61,74,80,81,82,83,84,85,86,87,90,99,102,103,104,105,106,107,108,109,110,111,112,113,114,115,128,131,132,133,134,139,143,],[-44,87,87,87,87,87,87,-63,-64,-65,-66,-45,87,87,-55,-56,87,87,-57,-58,-59,-60,-61,-62,87,87,87,87,87,87,87,-53,87,87,]),'NOT_EQUAL':([44,80,81,90,114,132,133,134,],[-44,108,-50,-45,-52,-54,-51,-53,]),'GREATER_THAN':([44,80,81,90,114,132,133,134,],[-44,109,-50,-45,-52,-54,-51,-53,]),'LESS_THAN':([44,80,81,90,114,132,133,134,],[-44,110,-50,-45,-52,-54,-51,-53,]),'GREATER_THAN_OR_EQUAL':([44,80,81,90,114,132,133,134,],[-44,111,-50,-45,-52,-54,-51,-53,]),'LESS_THAN_OR_EQUAL':([44,80,81,90,114,132,133,134,],[-44,112,-50,-45,-52,-54,-51,-53,]),'RBRACKET':([44,46,81,89,90,94,96,114,115,117,118,119,120,121,122,125,129,132,133,134,141,144,],[-44,-42,-50,-43,-45,123,126,-52,134,-10,-67,-68,-69,-70,-71,137,140,-54,-51,-53,-11,145,]),'AND':([44,79,81,90,114,131,132,133,134,],[-44,103,-50,-45,-52,-49,-54,-51,-53,]),'OR':([44,79,81,90,114,131,132,133,134,],[-44,104,-50,-45,-52,-49,-54,-51,-53,]),'DOT':([44,],[64,]),'LBRACKET':([47,53,61,69,74,75,82,83,84,85,86,87,99,102,103,104,105,106,107,108,109,110,111,112,113,138,139,],[67,70,83,95,83,101,83,83,-63,-64,-65,-66,83,83,-55,-56,83,83,-57,-58,-59,-60,-61,-62,83,142,83,]),'VALUES':([53,126,],[69,138,]),'ON':([57,],[74,]),'USING':([57,],[75,]),'int':([93,136,],[118,118,]),'str':([93,136,],[119,119,]),'bol':([93,136,],[120,120,]),'bool':([93,136,],[121,121,]),'float':([93,136,],[122,122,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'create':([0,],[2,]),'show':([0,],[3,]),'drop':([0,],[4,]),'tree_selects':([0,],[5,]),'insert':([0,],[6,]),'update':([0,],[7,]),'delete':([0,],[8,]),'nested_selects':([0,29,30,],[12,50,51,]),'select':([0,29,30,],[16,16,16,]),'create_body':([9,],[25,]),'union':([12,50,51,],[29,29,29,]),'intersect':([12,50,51,],[30,30,30,]),'insert_body':([13,],[33,]),'update_body':([14,],[35,]),'join':([16,],[38,]),'select_body':([17,],[42,]),'fields':([17,65,70,95,142,],[43,91,96,125,144,]),'field':([17,54,61,63,65,70,74,82,83,95,98,99,101,102,105,106,113,139,142,],[46,72,81,89,46,46,81,81,81,46,127,81,129,81,81,81,81,81,46,]),'join_right_table':([38,],[56,]),'condition':([42,55,71,],[60,73,97,]),'expression':([54,],[71,]),'tree_condition':([61,74,102,],[78,100,130,]),'tree_comparison':([61,74,102,],[79,79,79,]),'tree_expression':([61,74,82,83,99,102,105,106,113,139,],[80,80,114,115,128,80,131,132,133,143,]),'operator_expression':([61,74,80,81,82,83,99,102,105,106,113,114,115,128,131,132,133,139,143,],[82,82,106,113,82,82,82,82,82,82,82,106,106,106,106,106,106,82,106,]),'values':([67,],[94,]),'operator_condition':([79,],[102,]),'operator_comparison':([80,],[105,]),'type':([93,136,],[117,141,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> create ENDREQUEST','start',2,'p_start','SQL_parser.py',269),
  ('start -> show ENDREQUEST','start',2,'p_start','SQL_parser.py',270),
  ('start -> drop ENDREQUEST','start',2,'p_start','SQL_parser.py',271),
  ('start -> tree_selects ENDREQUEST','start',2,'p_start','SQL_parser.py',272),
  ('start -> insert ENDREQUEST','start',2,'p_start','SQL_parser.py',273),
  ('start -> update ENDREQUEST','start',2,'p_start','SQL_parser.py',274),
  ('start -> delete ENDREQUEST','start',2,'p_start','SQL_parser.py',275),
  ('create -> CREATE create_body','create',2,'p_create','SQL_parser.py',282),
  ('create_body -> TABLE NAME LBRACKET values RBRACKET','create_body',5,'p_create_body','SQL_parser.py',288),
  ('values -> NAME type','values',2,'p_values','SQL_parser.py',294),
  ('values -> values COMMA NAME type','values',4,'p_values','SQL_parser.py',295),
  ('show -> SHOW CREATE TABLE NAME','show',4,'p_show','SQL_parser.py',306),
  ('drop -> DROP TABLE NAME','drop',3,'p_drop','SQL_parser.py',312),
  ('tree_selects -> nested_selects','tree_selects',1,'p_tree_selects','SQL_parser.py',317),
  ('nested_selects -> select join join_right_table','nested_selects',3,'p_nested_selects','SQL_parser.py',323),
  ('nested_selects -> nested_selects union nested_selects','nested_selects',3,'p_nested_selects','SQL_parser.py',324),
  ('nested_selects -> nested_selects intersect nested_selects','nested_selects',3,'p_nested_selects','SQL_parser.py',325),
  ('nested_selects -> select','nested_selects',1,'p_nested_selects','SQL_parser.py',326),
  ('join -> JOIN','join',1,'p_join','SQL_parser.py',338),
  ('join -> LEFT OUTER JOIN','join',3,'p_join','SQL_parser.py',339),
  ('join -> RIGHT OUTER JOIN','join',3,'p_join','SQL_parser.py',340),
  ('join_right_table -> NAME ON tree_condition','join_right_table',3,'p_join_right_table','SQL_parser.py',349),
  ('join_right_table -> NAME USING LBRACKET field RBRACKET','join_right_table',5,'p_join_right_table','SQL_parser.py',350),
  ('union -> UNION','union',1,'p_union','SQL_parser.py',358),
  ('union -> UNION ALL','union',2,'p_union','SQL_parser.py',359),
  ('intersect -> INTERSECT','intersect',1,'p_intersect','SQL_parser.py',368),
  ('select -> SELECT select_body','select',2,'p_select','SQL_parser.py',374),
  ('select -> SELECT select_body condition','select',3,'p_select','SQL_parser.py',375),
  ('select_body -> fields FROM NAME','select_body',3,'p_select_body','SQL_parser.py',384),
  ('select_body -> STAR COMMA fields FROM NAME','select_body',5,'p_select_body','SQL_parser.py',385),
  ('select_body -> STAR FROM NAME','select_body',3,'p_select_body','SQL_parser.py',386),
  ('insert -> INSERT insert_body','insert',2,'p_insert','SQL_parser.py',397),
  ('insert_body -> INTO NAME VALUES LBRACKET fields RBRACKET','insert_body',6,'p_insert_body','SQL_parser.py',403),
  ('insert_body -> INTO NAME LBRACKET fields RBRACKET VALUES LBRACKET fields RBRACKET','insert_body',9,'p_insert_body','SQL_parser.py',404),
  ('update -> UPDATE update_body','update',2,'p_update','SQL_parser.py',413),
  ('update_body -> NAME SET expression','update_body',3,'p_update_body','SQL_parser.py',419),
  ('update_body -> NAME SET expression condition','update_body',4,'p_update_body','SQL_parser.py',420),
  ('expression -> field EQUAL tree_expression','expression',3,'p_expression','SQL_parser.py',429),
  ('expression -> expression COMMA field EQUAL tree_expression','expression',5,'p_expression','SQL_parser.py',430),
  ('delete -> DELETE FROM NAME','delete',3,'p_delete','SQL_parser.py',443),
  ('delete -> DELETE FROM NAME condition','delete',4,'p_delete','SQL_parser.py',444),
  ('fields -> field','fields',1,'p_fields','SQL_parser.py',452),
  ('fields -> fields COMMA field','fields',3,'p_fields','SQL_parser.py',453),
  ('field -> NAME','field',1,'p_field','SQL_parser.py',464),
  ('field -> NAME DOT NAME','field',3,'p_field','SQL_parser.py',465),
  ('condition -> WHERE tree_condition','condition',2,'p_condition','SQL_parser.py',475),
  ('tree_condition -> tree_comparison operator_condition tree_condition','tree_condition',3,'p_tree_condition','SQL_parser.py',481),
  ('tree_condition -> tree_comparison','tree_condition',1,'p_tree_condition','SQL_parser.py',482),
  ('tree_comparison -> tree_expression operator_comparison tree_expression','tree_comparison',3,'p_tree_comparison','SQL_parser.py',496),
  ('tree_expression -> field','tree_expression',1,'p_tree_expression','SQL_parser.py',504),
  ('tree_expression -> field operator_expression tree_expression','tree_expression',3,'p_tree_expression','SQL_parser.py',505),
  ('tree_expression -> operator_expression tree_expression','tree_expression',2,'p_tree_expression','SQL_parser.py',506),
  ('tree_expression -> LBRACKET tree_expression RBRACKET','tree_expression',3,'p_tree_expression','SQL_parser.py',507),
  ('tree_expression -> tree_expression operator_expression tree_expression','tree_expression',3,'p_tree_expression','SQL_parser.py',508),
  ('operator_condition -> AND','operator_condition',1,'p_operator_condition','SQL_parser.py',520),
  ('operator_condition -> OR','operator_condition',1,'p_operator_condition','SQL_parser.py',521),
  ('operator_comparison -> EQUAL','operator_comparison',1,'p_operator_comparison','SQL_parser.py',527),
  ('operator_comparison -> NOT_EQUAL','operator_comparison',1,'p_operator_comparison','SQL_parser.py',528),
  ('operator_comparison -> GREATER_THAN','operator_comparison',1,'p_operator_comparison','SQL_parser.py',529),
  ('operator_comparison -> LESS_THAN','operator_comparison',1,'p_operator_comparison','SQL_parser.py',530),
  ('operator_comparison -> GREATER_THAN_OR_EQUAL','operator_comparison',1,'p_operator_comparison','SQL_parser.py',531),
  ('operator_comparison -> LESS_THAN_OR_EQUAL','operator_comparison',1,'p_operator_comparison','SQL_parser.py',532),
  ('operator_expression -> PLUS','operator_expression',1,'p_operator_expression','SQL_parser.py',538),
  ('operator_expression -> MINUS','operator_expression',1,'p_operator_expression','SQL_parser.py',539),
  ('operator_expression -> STAR','operator_expression',1,'p_operator_expression','SQL_parser.py',540),
  ('operator_expression -> DIVISION','operator_expression',1,'p_operator_expression','SQL_parser.py',541),
  ('type -> int','type',1,'p_type','SQL_parser.py',547),
  ('type -> str','type',1,'p_type','SQL_parser.py',548),
  ('type -> bol','type',1,'p_type','SQL_parser.py',549),
  ('type -> bool','type',1,'p_type','SQL_parser.py',550),
  ('type -> float','type',1,'p_type','SQL_parser.py',551),
]
