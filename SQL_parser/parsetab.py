
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA CREATE DELETE DROP ENDREQUEST EQUAL FROM INSERT INTO LBRACKET NAME RBRACKET SELECT SET SHOW STAR TABLE UPDATE VALUES WHERE bol bool int strstart : create\n             | show\n             | drop\n             | select\n             | insert\n             | update\n             | deletecreate : CREATE create_body ENDREQUESTcreate_body : TABLE NAME LBRACKET values RBRACKETvalues : NAME type\n              | values COMMA NAME typeshow : SHOW CREATE TABLE NAME ENDREQUESTdrop : DROP TABLE NAME ENDREQUESTselect : SELECT select_body ENDREQUEST\n              | SELECT select_body condition ENDREQUESTselect_body : fields FROM NAME\n                   | STAR COMMA fields FROM NAME\n                   | STAR FROM NAMEinsert : INSERT insert_body ENDREQUESTinsert_body : INTO NAME VALUES LBRACKET fields RBRACKET\n                   | INTO NAME LBRACKET fields RBRACKET VALUES LBRACKET fields RBRACKETupdate : UPDATE update_body ENDREQUESTupdate_body : NAME SET expression\n                   | NAME SET expression conditionexpression : field operator field\n                  | expression COMMA field operator fielddelete : DELETE FROM NAME ENDREQUEST\n              | DELETE FROM NAME condition ENDREQUESTfields : NAME\n              | fields COMMA NAMEfield : NAMEoperator : EQUALcondition : WHERE field operator fieldtype : int\n            | str\n            | bol\n            | bool'
    
_lr_action_items = {'CREATE':([0,10,],[9,18,]),'SHOW':([0,],[10,]),'DROP':([0,],[11,]),'SELECT':([0,],[12,]),'INSERT':([0,],[13,]),'UPDATE':([0,],[14,]),'DELETE':([0,],[15,]),'$end':([1,2,3,4,5,6,7,8,29,33,40,42,47,48,59,63,72,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-14,-19,-22,-13,-15,-27,-12,-28,]),'TABLE':([9,11,18,],[17,19,31,]),'STAR':([12,],[23,]),'NAME':([12,14,17,19,25,28,31,35,36,37,38,39,43,45,56,64,65,66,67,70,71,79,89,91,],[22,27,30,32,41,44,46,50,51,52,22,54,50,61,22,50,-32,81,22,50,50,86,50,22,]),'INTO':([13,],[25,]),'FROM':([15,21,22,23,52,53,],[28,36,-29,39,-30,66,]),'ENDREQUEST':([16,20,24,26,32,34,44,46,50,51,54,57,60,69,78,80,81,85,87,92,94,],[29,33,40,42,47,48,59,63,-31,-16,-18,-23,72,-24,-9,-33,-17,-25,-20,-26,-21,]),'WHERE':([20,44,50,51,54,57,81,85,92,],[35,35,-31,-16,-18,35,-17,-25,-26,]),'COMMA':([21,22,23,50,52,53,57,62,68,73,74,75,76,77,82,85,90,92,93,],[37,-29,38,-31,-30,37,70,79,37,-10,-34,-35,-36,-37,37,-25,-11,-26,37,]),'RBRACKET':([22,52,62,68,73,74,75,76,77,82,90,93,],[-29,-30,78,83,-10,-34,-35,-36,-37,87,-11,94,]),'SET':([27,],[43,]),'LBRACKET':([30,41,55,88,],[45,56,67,91,]),'VALUES':([41,83,],[55,88,]),'EQUAL':([49,50,58,84,],[65,-31,65,65,]),'int':([61,86,],[74,74,]),'str':([61,86,],[75,75,]),'bol':([61,86,],[76,76,]),'bool':([61,86,],[77,77,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'create':([0,],[2,]),'show':([0,],[3,]),'drop':([0,],[4,]),'select':([0,],[5,]),'insert':([0,],[6,]),'update':([0,],[7,]),'delete':([0,],[8,]),'create_body':([9,],[16,]),'select_body':([12,],[20,]),'fields':([12,38,56,67,91,],[21,53,68,82,93,]),'insert_body':([13,],[24,]),'update_body':([14,],[26,]),'condition':([20,44,57,],[34,60,69,]),'field':([35,43,64,70,71,89,],[49,58,80,84,85,92,]),'expression':([43,],[57,]),'values':([45,],[62,]),'operator':([49,58,84,],[64,71,89,]),'type':([61,86,],[73,90,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> create','start',1,'p_start','SQL_parser.py',94),
  ('start -> show','start',1,'p_start','SQL_parser.py',95),
  ('start -> drop','start',1,'p_start','SQL_parser.py',96),
  ('start -> select','start',1,'p_start','SQL_parser.py',97),
  ('start -> insert','start',1,'p_start','SQL_parser.py',98),
  ('start -> update','start',1,'p_start','SQL_parser.py',99),
  ('start -> delete','start',1,'p_start','SQL_parser.py',100),
  ('create -> CREATE create_body ENDREQUEST','create',3,'p_create','SQL_parser.py',106),
  ('create_body -> TABLE NAME LBRACKET values RBRACKET','create_body',5,'p_create_body','SQL_parser.py',112),
  ('values -> NAME type','values',2,'p_values','SQL_parser.py',118),
  ('values -> values COMMA NAME type','values',4,'p_values','SQL_parser.py',119),
  ('show -> SHOW CREATE TABLE NAME ENDREQUEST','show',5,'p_show','SQL_parser.py',130),
  ('drop -> DROP TABLE NAME ENDREQUEST','drop',4,'p_drop','SQL_parser.py',136),
  ('select -> SELECT select_body ENDREQUEST','select',3,'p_select','SQL_parser.py',142),
  ('select -> SELECT select_body condition ENDREQUEST','select',4,'p_select','SQL_parser.py',143),
  ('select_body -> fields FROM NAME','select_body',3,'p_select_body','SQL_parser.py',149),
  ('select_body -> STAR COMMA fields FROM NAME','select_body',5,'p_select_body','SQL_parser.py',150),
  ('select_body -> STAR FROM NAME','select_body',3,'p_select_body','SQL_parser.py',151),
  ('insert -> INSERT insert_body ENDREQUEST','insert',3,'p_insert','SQL_parser.py',162),
  ('insert_body -> INTO NAME VALUES LBRACKET fields RBRACKET','insert_body',6,'p_insert_body','SQL_parser.py',168),
  ('insert_body -> INTO NAME LBRACKET fields RBRACKET VALUES LBRACKET fields RBRACKET','insert_body',9,'p_insert_body','SQL_parser.py',169),
  ('update -> UPDATE update_body ENDREQUEST','update',3,'p_update','SQL_parser.py',178),
  ('update_body -> NAME SET expression','update_body',3,'p_update_body','SQL_parser.py',184),
  ('update_body -> NAME SET expression condition','update_body',4,'p_update_body','SQL_parser.py',185),
  ('expression -> field operator field','expression',3,'p_expression','SQL_parser.py',194),
  ('expression -> expression COMMA field operator field','expression',5,'p_expression','SQL_parser.py',195),
  ('delete -> DELETE FROM NAME ENDREQUEST','delete',4,'p_delete','SQL_parser.py',208),
  ('delete -> DELETE FROM NAME condition ENDREQUEST','delete',5,'p_delete','SQL_parser.py',209),
  ('fields -> NAME','fields',1,'p_fields','SQL_parser.py',218),
  ('fields -> fields COMMA NAME','fields',3,'p_fields','SQL_parser.py',219),
  ('field -> NAME','field',1,'p_field','SQL_parser.py',230),
  ('operator -> EQUAL','operator',1,'p_operator','SQL_parser.py',236),
  ('condition -> WHERE field operator field','condition',4,'p_condition','SQL_parser.py',241),
  ('type -> int','type',1,'p_type','SQL_parser.py',247),
  ('type -> str','type',1,'p_type','SQL_parser.py',248),
  ('type -> bol','type',1,'p_type','SQL_parser.py',249),
  ('type -> bool','type',1,'p_type','SQL_parser.py',250),
]
